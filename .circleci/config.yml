  # Javascript Node CircleCI 2.0 configuration file
  #
  # Check https://circleci.com/docs/2.0/language-javascript/ for more details
  #
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:6.13

    working_directory: ~/project

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "bower.json" }}
            - v2-dependencies-

      - run: sudo npm install phantomjs --global  #stupid bug with phontomjs version
      - run: yarn install --ignore-engines
      - run: node_modules/bower/bin/bower install
      - run: node_modules/grunt-cli/bin/grunt copy
      - run: node_modules/grunt-cli/bin/grunt build

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - save_cache:
          paths:
            - bower_components
          key: v2-dependencies-{{ checksum "bower.json" }}

      - run: rm -rf .git
      - run: rm -rf bower_components

      - persist_to_workspace:
          root: ~/project
          paths:
            - public
            - node_modules

  deploy-qa:
    docker:
      - image: circleci/node:6.13

    working_directory: ~/project

    steps:
      - checkout

      - attach_workspace:
          at: ~/project

      - run: sudo apt-get update && sudo apt-get install -y python-pip libpython-dev
      - run: sudo pip install awscli
      - run:
          command: |
            export AWS_CODE_DEPLOY_REGION=eu-central-1
            export AWS_CODE_DEPLOY_APPLICATION_NAME=admin
            export AWS_CODE_DEPLOY_DEPLOYMENT_CONFIG_NAME=CodeDeployDefault.AllAtOnce
            export AWS_CODE_DEPLOY_DEPLOYMENT_GROUP_NAME="quality"
            export AWS_CODE_DEPLOY_SERVICE_ROLE_ARN="arn:aws:iam::667251554135:role/truelinked-codedeploy"
            export AWS_CODE_DEPLOY_EC2_TAG_FILTERS=
            export AWS_CODE_DEPLOY_APP_SOURCE=$HOME/project
            export AWS_CODE_DEPLOY_S3_FILENAME="${CIRCLE_BUILD_NUM}#${CIRCLE_SHA1:0:7}.zip"
            export AWS_CODE_DEPLOY_S3_BUCKET=truelinked-codedeploy
            export AWS_CODE_DEPLOY_S3_KEY_PREFIX=
            export AWS_CODE_DEPLOY_S3_LIMIT_BUCKET_FILES=10
            export AWS_CODE_DEPLOY_S3_SSE=true
            export AWS_CODE_DEPLOY_REVISION_DESCRIPTION="${CIRCLE_BRANCH} (#${CIRCLE_SHA1:0:7})"
            export AWS_CODE_DEPLOY_DEPLOYMENT_DESCRIPTION="Deployed via CircleCI on $(date)"
            .circleci/aws-code-deploy.sh

  deploy-staging:
    docker:
      - image: circleci/node:6.13

    working_directory: ~/project

    steps:
      - checkout

      - attach_workspace:
          at: ~/project

      - run: sudo apt-get update && sudo apt-get install -y python-pip libpython-dev
      - run: sudo pip install awscli
      - run:
          command: |
            export AWS_CODE_DEPLOY_REGION=eu-central-1
            export AWS_CODE_DEPLOY_APPLICATION_NAME=admin
            export AWS_CODE_DEPLOY_DEPLOYMENT_CONFIG_NAME=CodeDeployDefault.AllAtOnce
            export AWS_CODE_DEPLOY_DEPLOYMENT_GROUP_NAME="staging"
            export AWS_CODE_DEPLOY_SERVICE_ROLE_ARN="arn:aws:iam::667251554135:role/truelinked-codedeploy"
            export AWS_CODE_DEPLOY_EC2_TAG_FILTERS=
            export AWS_CODE_DEPLOY_APP_SOURCE=$HOME/project
            export AWS_CODE_DEPLOY_S3_FILENAME="${CIRCLE_BUILD_NUM}#${CIRCLE_SHA1:0:7}.zip"
            export AWS_CODE_DEPLOY_S3_BUCKET=truelinked-codedeploy
            export AWS_CODE_DEPLOY_S3_KEY_PREFIX=
            export AWS_CODE_DEPLOY_S3_LIMIT_BUCKET_FILES=10
            export AWS_CODE_DEPLOY_S3_SSE=true
            export AWS_CODE_DEPLOY_REVISION_DESCRIPTION="${CIRCLE_BRANCH} (#${CIRCLE_SHA1:0:7})"
            export AWS_CODE_DEPLOY_DEPLOYMENT_DESCRIPTION="Deployed via CircleCI on $(date)"
            .circleci/aws-code-deploy.sh

  deploy-production:
    docker:
      - image: circleci/node:6.13

    working_directory: ~/project

    steps:
      - checkout

      - attach_workspace:
          at: ~/project

      - run: sudo apt-get update && sudo apt-get install -y python-pip libpython-dev
      - run: sudo pip install awscli
      - run:
          command: |
            export AWS_CODE_DEPLOY_REGION=eu-central-1
            export AWS_CODE_DEPLOY_APPLICATION_NAME=admin
            export AWS_CODE_DEPLOY_DEPLOYMENT_CONFIG_NAME=CodeDeployDefault.AllAtOnce
            export AWS_CODE_DEPLOY_DEPLOYMENT_GROUP_NAME="production"
            export AWS_CODE_DEPLOY_SERVICE_ROLE_ARN="arn:aws:iam::667251554135:role/truelinked-codedeploy"
            export AWS_CODE_DEPLOY_EC2_TAG_FILTERS=
            export AWS_CODE_DEPLOY_APP_SOURCE=$HOME/project
            export AWS_CODE_DEPLOY_S3_FILENAME="${CIRCLE_BUILD_NUM}#${CIRCLE_SHA1:0:7}.zip"
            export AWS_CODE_DEPLOY_S3_BUCKET=truelinked-codedeploy
            export AWS_CODE_DEPLOY_S3_KEY_PREFIX=
            export AWS_CODE_DEPLOY_S3_LIMIT_BUCKET_FILES=10
            export AWS_CODE_DEPLOY_S3_SSE=true
            export AWS_CODE_DEPLOY_REVISION_DESCRIPTION="${CIRCLE_BRANCH} (#${CIRCLE_SHA1:0:7})"
            export AWS_CODE_DEPLOY_DEPLOYMENT_DESCRIPTION="Deployed via CircleCI on $(date)"
            .circleci/aws-code-deploy.sh

# Workflows to orchestrate the execution of above jobs.
# Reference: https://circleci.com/docs/2.0/workflows/
workflows:
  version: 2

  build-test-and-approval-deploy:
    jobs:
      # Main build job
      - build

      # Wait with QA deployment for non-develop branches.
      - hold-qa:
          type: approval

          requires:
            - build

          filters:
            branches:
              ignore:
                - staging
                - master

      - hold-staging:
          type: approval

          requires:
            - build

          filters:
            branches:
              only:
                - staging

      - hold-production:
          type: approval

          requires:
            - build

          filters:
            branches:
              only:
                - master

      # Deploy QA
      - deploy-qa:
          requires:
            - hold-qa

          filters:
            branches:
              ignore:
                - staging
                - master

      # Deploy Staging
      - deploy-staging:
          requires:
            - hold-staging

          filters:
            branches:
              only:
                - staging

      # Deploy production - only master and no "hold" step
      - deploy-production:
          requires:
            - build

          filters:
            branches:
              only:
                - master
